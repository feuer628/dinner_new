import {ClientType} from "./clientType";
import {FormPaymentType} from "./formPaymentType";

/**
 * Статусы составителей бюджетных платежей. Разделены на две категории:
 * current - статусы, использующиеся после 02.10.2017
 * before021017 - статусы, использующиеся до 02.10.2017
 */
export class ChargeCreatorStatuses {

    /** Формат даты */
    private static readonly DATE_FORMAT = "DD.MM.YYYY";

    /** Дата 02.10.2017 */
    private static readonly DATE_02102017 = moment("02.10.2017", ChargeCreatorStatuses.DATE_FORMAT);

    private static readonly CURRENT: ChargeCreatorStatus[] = [
        {id: "01", value: "налогоплательщик - юридическое лицо"},
        {id: "02", value: "налоговый агент"},
        {id: "03", value: "организация федеральной почтовой связи, составившая распоряжение о переводе денежных средств по каждому платежу физического лица, " +
            "за исключением уплаты таможенных платежей"},
        {id: "04", value: "налоговый орган"},
        {id: "05", value: "Федеральная служба судебных приставов и ее территориальные органы"},
        {id: "06", value: "участник внешнеэкономической деятельности - юридическое лицо, за исключением получателя международного почтового отправления"},
        {id: "07", value: "таможенный орган"},
        {id: "08", value: "плательщик - юридическое лицо, индивидуальный предприниматель, нотариус, занимающийся частной практикой, адвокат, " +
            "учредивший адвокатский кабинет, глава крестьянского (фермерского) хозяйства, осуществляющие перевод денежных средств в уплату платежей " +
            "в бюджетную систему Российской Федерации (за исключением налогов, сборов, страховых взносов и иных платежей, " +
            "администрируемых налоговыми органами)"},
        {id: "09", value: "налогоплательщик - индивидуальный предприниматель"},
        {id: "10", value: "налогоплательщик - нотариус, занимающийся частной практикой"},
        {id: "11", value: "налогоплательщик - адвокат, учредивший адвокатский кабинет"},
        {id: "12", value: "налогоплательщик - глава крестьянского (фермерского) хозяйства"},
        {id: "13", value: "налогоплательщик - физическое лицо"},
        {id: "16", value: "участник внешнеэкономической деятельности - физическое лицо"},
        {id: "17", value: "участник внешнеэкономической деятельности - индивидуальный предприниматель"},
        {id: "18", value: "плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации " +
            "возложена обязанность по уплате таможенных платежей"},
        {id: "19", value: "организации и их филиалы (далее - организации), составившие распоряжение о переводе денежных средств, " +
            "удержанных из заработной платы (дохода) должника - физического лица в счет погашения задолженности по платежам " +
            "в бюджетную систему Российской Федерации на основании исполнительного документа, направленного в организацию в установленном порядке"},
        {id: "20", value: "кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение о переводе денежных средств " +
            "по каждому платежу физического лица"},
        {id: "21", value: "ответственный участник консолидированной группы налогоплательщиков"},
        {id: "22", value: "участник консолидированной группы налогоплательщиков"},
        {id: "23", value: "Фонд социального страхования Российской Федерации"},
        {id: "24", value: "плательщик - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, страховых взносов, администрируемых " +
            "Фондом социального страхования Российской Федерации, и иных платежей в бюджетную систему Российской Федерации (за исключением сборов " +
            "за совершение налоговыми органами юридически значимых действий и иных платежей, администрируемых налоговыми и таможенными органами)"},
        {id: "25", value: "банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации " +
            "при возврате налога на добавленную стоимость, излишне полученной налогоплательщиком (зачтенной ему) в заявительном порядке, " +
            "а также при уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, " +
            "и акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции"},
        {id: "26", value: "учредители (участники) должника, собственники имущества должника - унитарного предприятия или третьи лица, " +
            "составившие распоряжение о переводе денежных средств на погашение требований к должнику по уплате обязательных платежей, " +
            "включенных в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве"},
        {id: "27", value: "кредитные организации (филиалы кредитных организаций), составившие распоряжение о переводе денежных средств, " +
            "перечисленных из бюджетной системы Российской Федерации, не зачисленных получателю и подлежащих возврату в " +
            "бюджетную систему Российской Федерации"},
        {id: "28", value: "участник внешнеэкономической деятельности - получатель международного почтового отправления"}
    ];

    private static readonly BEFORE_02102017: ChargeCreatorStatus[] = [
        {id: "01", value: "налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - юридическое лицо"},
        {id: "02", value: "налоговый агент"},
        {id: "03", value: "организация федеральной почтовой связи, составившая распоряжение о переводе денежных средств по каждому платежу физического лица"},
        {id: "04", value: "налоговый орган"},
        {id: "05", value: "Федеральная служба судебных приставов и ее территориальные органы"},
        {id: "06", value: "участник внешнеэкономической деятельности - юридическое лицо"},
        {id: "07", value: "таможенный орган"},
        {id: "08", value: "плательщик - юридическое лицо, индивидуальный предприниматель, нотариус, занимающийся частной практикой, адвокат, " +
            "учредивший адвокатский кабинет, глава крестьянского (фермерского) хозяйства, осуществляющие перевод денежных средств в уплату платежей " +
            "в бюджетную систему Российской Федерации (за исключением налогов, сборов, страховых взносов и иных платежей, " +
            "администрируемых налоговыми органами)"},
        {id: "09", value: "налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - " +
            "индивидуальный предприниматель"},
        {id: "10", value: "налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - " +
            "нотариус, занимающийся частной практикой"},
        {id: "11", value: "налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - " +
            "адвокат, учредивший адвокатский кабинет" },
        {id: "12", value: "налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - " +
            "глава крестьянского (фермерского) хозяйства" },
        {id: "13", value: "налогоплательщик (плательщик сборов, за совершение налоговыми органами юридически значимых действий, " +
            "страховых взносов и иных платежей, администрируемых налоговыми органами) - физическое лицо"},
        {id: "16", value: "участник внешнеэкономической деятельности - физическое лицо"},
        {id: "17", value: "участник внешнеэкономической деятельности - индивидуальный предприниматель" },
        {id: "18", value: "плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации " +
            "возложена обязанность по уплате таможенных платежей" },
        {id: "19", value: "организации и их филиалы (далее - организации), составившие распоряжение о переводе денежных средств, " +
            "удержанных из заработной платы (дохода) должника - физического лица в счет погашения задолженности по платежам " +
            "в бюджетную систему Российской Федерации на основании исполнительного документа, направленного в организацию в установленном порядке"},
        {id: "20", value: "кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение о переводе денежных средств " +
            "по каждому платежу физического лица"},
        {id: "21", value: "ответственный участник консолидированной группы налогоплательщиков"},
        {id: "22", value: "участник консолидированной группы налогоплательщиков"},
        {id: "23", value: "Фонд социального страхования Российской Федерации"},
        {id: "24", value: "плательщик - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, страховых взносов, администрируемых Фондом " +
            "социального страхования Российской Федерации, и иных платежей в бюджетную систему Российской Федерации (за исключением сборов " +
            "за совершение налоговыми органами юридически значимых действий и иных платежей, администрируемых налоговыми и таможенными органами)"},
        {id: "25", value: "банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации " +
            "при возврате налога на добавленную стоимость, излишне полученной налогоплательщиком (зачтенной ему) в заявительном порядке, " +
            "а также при уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, " +
            "и акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции"},
        {id: "26", value: "учредители (участники) должника, собственники имущества должника - унитарного предприятия или третьи лица, " +
            "составившие распоряжение о переводе денежных средств на погашение требований к должнику по уплате обязательных платежей, " +
            "включенных в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве"},
    ];

    /** Структура позволяющая быстро найти нужные статусы составителя для определенной платежной формы и типа клиента */
    private static readonly STATUSES_BY_FORM_TYPE: { [key: string]: (clientType: ClientType) => ChargeCreatorStatus[] } = {
        BUDGET: (clientType: ClientType): ChargeCreatorStatus[] =>
            [ClientType.INDIVIDUAL, ClientType.NOTARY, ClientType.LAWYER, ClientType.FARM].includes(clientType) ?
                ChargeCreatorStatuses.filter(["08", "24"]) : ChargeCreatorStatuses.filter(["08"]),
        CUSTOMS: (clientType: ClientType): ChargeCreatorStatus[] => {
            switch (clientType) {
                case ClientType.INDIVIDUAL:
                    return ChargeCreatorStatuses.filter(["16", "17", "28"]);
                case ClientType.CORPORATE:
                case ClientType.BANK_CORR:
                    return ChargeCreatorStatuses.filter(["06", "28"]);
                case ClientType.NOTARY:
                case ClientType.LAWYER:
                case ClientType.FARM:
                    return ChargeCreatorStatuses.filter(["16", "28"]);
            }
            throw new Error("Неизвестный тип клиента: " + clientType);
        },
        TAX: (clientType: ClientType): ChargeCreatorStatus[] => {
            switch (clientType) {
                case ClientType.INDIVIDUAL:
                    return ChargeCreatorStatuses.filter(["02", "09", "13"]);
                case ClientType.CORPORATE:
                case ClientType.BANK_CORR:
                    return ChargeCreatorStatuses.filter(["01", "02"]);
                case ClientType.NOTARY:
                    return ChargeCreatorStatuses.filter(["02", "10", "13"]);
                case ClientType.LAWYER:
                    return ChargeCreatorStatuses.filter(["02", "11", "13"]);
                case ClientType.FARM:
                    return ChargeCreatorStatuses.filter(["02", "12", "13"]);
            }
            throw new Error("Неизвестный тип клиента: " + clientType);
        }
    };

    /**
     * Возвращает список отфильтрованных статусов составителя
     * @param dateDoc дата документа
     * @param filter  фильтр
     * @returns {ChargeCreatorStatus[]}
     */
    static getStatuses(dateDoc: string, filter?: ChargeCreatorFilter): ChargeCreatorStatus[] {
        const statuses = moment(dateDoc, ChargeCreatorStatuses.DATE_FORMAT).isBefore(ChargeCreatorStatuses.DATE_02102017) ?
            ChargeCreatorStatuses.BEFORE_02102017 : ChargeCreatorStatuses.CURRENT;
        return !filter ? statuses :
            statuses.filter(item => filter.isInclude ? filter.statuses.includes(item.id) : !filter.statuses.includes(item.id));
    }

    /**
     * Возвращает массив статусов для определенной платежной формы и типа клиента
     * @param {FormPaymentType} formPaymentType тип платежной формы
     * @param {ClientType} clientType тип клиента
     * @return {ChargeCreatorStatus[]}
     */
    static getByFormType(formPaymentType: FormPaymentType, clientType: ClientType): ChargeCreatorStatus[] {
        return ChargeCreatorStatuses.STATUSES_BY_FORM_TYPE[formPaymentType.enumName](clientType);
    }

    /**
     * Возвращает список статусов для платежа за третье лицо
     * @param formPaymentType тип платежной формы
     * @return {ChargeCreatorStatus[]}
     */
    static getStatusesForThirdParty(formPaymentType: FormPaymentType): ChargeCreatorStatus[] {
        switch (formPaymentType) {
            case FormPaymentType.TAX:
                return ChargeCreatorStatuses.filter(["01", "09", "10", "11", "12", "13"]);
            case FormPaymentType.BUDGET:
                return ChargeCreatorStatuses.filter(["08", "24"]);
        }
        throw new Error("Недопустимый тип платежной формы: " + formPaymentType);
    }

    /**
     * Возвращает статус по-умолчанию для платежей ГИС ГМП
     * @returns {undefined|ChargeCreatorStatus}
     */
    static getDefaultGisGmsStatus(): ChargeCreatorStatus {
        return ChargeCreatorStatuses.findStatus("08");
    }

    /**
     * Получение статуса по его идентификатору
     * @param id идентификатор статуса
     * @returns {undefined|ChargeCreatorStatus}
     */
    static findStatus(id: string): ChargeCreatorStatus {
        return ChargeCreatorStatuses.CURRENT.find(item => item.id === id) || null;
    }

    /**
     * Возвращает массив статусов на основе переданных идентификаторов
     * @param {string[]} statuses
     * @return {ChargeCreatorStatus[]}
     */
    private static filter(statuses: string[]): ChargeCreatorStatus[] {
        return ChargeCreatorStatuses.CURRENT.filter(status => statuses.includes(status.id));
    }
}

/**
 * Статус составителя
 */
export type ChargeCreatorStatus = {
    /** Код статуса */
    id: string,
    /** Описание статуса */
    value: string
};

/**
 * Фильтр статусов составителя
 */
export type ChargeCreatorFilter = {
    /** Признак включающей фильтрации */
    isInclude: boolean,
    /** Набор статусов для фильтрации */
    statuses: string[],
};
